/* context7: ai-chat-assistant-enhanced @mcps=7 */

interface ChatMessage {
  id: string
  role: 'user' | 'assistant' | 'system'
  content: string
  timestamp: Date
  products?: Product[] // ÃœrÃ¼nleri mesaja ekle
}

interface Product {
  id: string
  name: string
  slug: string
  price: number
  image: string
  short_description: string
  category?: string
}

interface AIResponse {
  message: string
  suggestions?: string[]
  products?: Product[]
  action?: 'search' | 'recommend' | 'help' | 'order_status' | 'category'
}

export const useAIChat = () => {
  const chatHistory = ref<ChatMessage[]>([])
  const isLoading = ref(false)
  const isConnected = ref(false)
  
  // Server-side API kullanÄ±mÄ± iÃ§in config'e gerek yok

  // Chat geÃ§miÅŸini initialize et
  const initializeChat = () => {
    if (chatHistory.value.length === 0) {
      chatHistory.value.push({
        id: generateId(),
        role: 'assistant',
        content: 'ğŸ‘‹ Merhaba! Moss Tactical AI asistanÄ±yÄ±m. Sizin iÃ§in Ã¶zel Ã¼rÃ¼n Ã¶nerileri yapabilirim. "Kamp malzemeleri", "bot Ã¶nerileri" gibi isteklerinizi belirtebilir veya aradÄ±ÄŸÄ±nÄ±z Ã¼rÃ¼nÃ¼ tarif edebilirsiniz.',
        timestamp: new Date()
      })
    }
    isConnected.value = true
  }

  // Mesaj gÃ¶nder
  const sendMessage = async (userMessage: string): Promise<AIResponse> => {
    isLoading.value = true
    
    try {
      // KullanÄ±cÄ± mesajÄ±nÄ± ekle
      const userMsg: ChatMessage = {
        id: generateId(),
        role: 'user',
        content: userMessage,
        timestamp: new Date()
      }
      chatHistory.value.push(userMsg)

      // Session ID oluÅŸtur (rastgele Ã¼rÃ¼nler iÃ§in)
      const sessionId = Date.now() + Math.random()
      
      // Server-side API'ye gÃ¶nder
      const chatResponse = await $fetch('/api/ai/chat', {
        method: 'POST',
        body: {
          message: userMessage,
          sessionId: sessionId, // Rastgele Ã¼rÃ¼nler iÃ§in session ID
          history: chatHistory.value.slice(-6).map(msg => ({
            role: msg.role,
            content: msg.content
          }))
        }
      }) as any

      // AI yanÄ±tÄ±nÄ± mesaja ekle (Ã¼rÃ¼nlerle birlikte)
      const aiMsg: ChatMessage = {
        id: generateId(),
        role: 'assistant',
        content: chatResponse.message || 'ÃœzgÃ¼nÃ¼m, bir hata oluÅŸtu.',
        timestamp: new Date(),
        products: chatResponse.products || [] // ÃœrÃ¼nleri mesaja ekle
      }
      chatHistory.value.push(aiMsg)

      // Server'dan gelen response'u kullan
      return {
        message: aiMsg.content,
        products: chatResponse.products || [],
        suggestions: chatResponse.suggestions || [],
        action: chatResponse.action
      }

    } catch (error) {
      console.error('AI Chat Error:', error)
      
      const errorMsg: ChatMessage = {
        id: generateId(),
        role: 'assistant',
        content: 'ÃœzgÃ¼nÃ¼m, ÅŸu anda teknik bir sorun yaÅŸÄ±yorum. LÃ¼tfen daha sonra tekrar deneyin veya farklÄ± bir soru sorun.',
        timestamp: new Date()
      }
      chatHistory.value.push(errorMsg)
      
      return {
        message: errorMsg.content,
        action: 'help',
        products: [],
        suggestions: [
          'PopÃ¼ler Ã¼rÃ¼nler',
          'Yeni Ã¼rÃ¼nler', 
          'Ä°letiÅŸim',
          'Tekrar dene'
        ]
      }
    } finally {
      isLoading.value = false
    }
  }

  // Chat geÃ§miÅŸini temizle
  const clearChat = () => {
    chatHistory.value = []
    initializeChat()
  }

  // Benzersiz ID oluÅŸtur
  const generateId = () => {
    return Date.now().toString(36) + Math.random().toString(36).substr(2)
  }

  // Chat'i baÅŸlat
  onMounted(() => {
    initializeChat()
  })

  return {
    chatHistory: readonly(chatHistory),
    isLoading: readonly(isLoading),
    isConnected: readonly(isConnected),
    sendMessage,
    clearChat,
    initializeChat
  }
} 